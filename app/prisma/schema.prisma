// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//run npx prisma generate so the prisma client gets updated with new models
//then run npx prisma db push so that the Mongodb is updated
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?

  role          String?
  
  accounts      Account[]
  sessions      Session[]
  
  // // Optional for WebAuthn support
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

//tell server that the user is logged in
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) //cuando el usuario inicia sesion
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Brand {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  name        String
  logo        String?
  stores      Store[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("brands")
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String
  products    Product[]
  brandId     String   @db.ObjectId
  brand       Brand    @relation(fields: [brandId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("stores")
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialNumber String   // Unique product identifier per Store
  storeId      String   @db.ObjectId
  store        Store    @relation(fields: [storeId], references: [id])
  bills        Bill[]
  qrCodeUrl    String?
  deletedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@unique([serialNumber, storeId]) // Ensures serial number uniqueness within a store
  @@map("products")
}

model Bill {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id])
  totalAmount  Int
  isPaid       Boolean  @default(false)
  orders       Order[]
  paidAmount   Int      @default(0)
  payment      Payment?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("bills")
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  billId       String   @db.ObjectId
  bill         Bill     @relation(fields: [billId], references: [id])
  name         String
  quantity     Int
  price        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("orders")
}

model Payment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  billId       String   @unique @db.ObjectId
  amount       Float
  paymentDate  DateTime @default(now())
  dateApproved String?
  paymentId    Int
  bill         Bill     @relation(fields: [billId], references: [id])
  @@map("payments")
}
