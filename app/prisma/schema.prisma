generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//run npx prisma generate so the prisma client gets updated with new models
//then run npx prisma db push so that the Mongodb is updated
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?

  role          String?
  
  accounts      Account[]
  sessions      Session[]
  
  // // Optional for WebAuthn support
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

//tell server that the user is logged in
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) //cuando el usuario inicia sesion
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Farm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String?
  size        String?    // in acres/hectares
  userId      String    // foreign key
  fields      Field[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("farms")
}

model Field {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  size        Float?    // in acres/hectares
  cropType    String
  plantedDate DateTime?
  farmId      String     @db.ObjectId
  farm        Farm      @relation(fields: [farmId], references: [id])
  scans       Scan[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("field")
}

model Scan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl        String
  diagnosis       String?
  confidence      Float?    // confidence score of the AI prediction
  recommendations String[]
  fieldId         String     @db.ObjectId
  field           Field     @relation(fields: [fieldId], references: [id])
  createdAt       DateTime  @default(now())
  status          ScanStatus @default(PENDING)

  @@map("scans")
}

enum ScanStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}